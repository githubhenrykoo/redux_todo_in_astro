name: Git Analysis

on:
  workflow_dispatch:
    inputs:
      days:
        description: 'Number of days of logs to analyze'
        required: false
        default: '1'
        type: string
      query:
        description: 'What would you like to ask about the logs?'
        required: false
        default: 'Summarize the main changes'
        type: string

jobs:
  analyze-logs:
    runs-on: ubuntu-latest
    environment: LLM_API_KEY
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install --upgrade google-generativeai
          pip install python-dotenv

      - name: Analyze Logs with Gemini
        env:
          GOOGLE_API_KEY: ${{ secrets.GITHUBGEMINIKEY }}
        run: |
          # Create Python script
          cat << 'EOF' > analyze_logs.py
          import os
          import glob
          from datetime import datetime
          import google.generativeai as genai

          # Configure Gemini from environment variable
          api_key = os.getenv('GOOGLE_API_KEY')
          if not api_key:
              print("Error: GOOGLE_API_KEY environment variable not set")
              exit(1)

          genai.configure(api_key=api_key)

          # Initialize model (unify the model name)
          model = genai.GenerativeModel('gemini-pro')

          workspace = os.getenv('GITHUB_WORKSPACE', '.')
          log_files = glob.glob(os.path.join(workspace, 'Docs/log/git-log-*.md'))
          if not log_files:
              print("No log files found")
              exit(1)

          latest_log = max(log_files)
          with open(latest_log, 'r') as f:
              log_content = f.read()

          query = '${{ github.event.inputs.query }}'
          prompt = f"""
          Analyze this git log and {query}:

          {log_content}

          Please provide:
          1. A summary of key changes
          2. Any patterns or trends you notice
          3. Recommendations if applicable
          """

          try:
              response = model.generate_content(prompt)
              
              # Format output as markdown
              output = f"""# Gemini Analysis
              Generated at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

              ## Analysis Results

              {response.text}
              """
              # Create 'Docs/analysis' directory if it doesn't exist
              analysis_dir = os.path.join(workspace, 'Docs', 'analysis')
              os.makedirs(analysis_dir, exist_ok=True)
              
              # Write output to file
              out_file = os.path.join(analysis_dir, f'gemini-analysis-{datetime.now().strftime("%Y-%m-%d")}.md')
              with open(out_file, 'w') as f:
                  f.write(output)
          except Exception as e:
              print(f"Error: {str(e)}")
              exit(1)
          EOF

          # Run the analysis script
          python3 analyze_logs.py

      - name: Analyze and Save
        env:
          GOOGLE_API_KEY: ${{ secrets.GITHUBGEMINIKEY }}
        run: |
          cat << 'EOF' > analyze_logs.py
import os
import glob
import google.generativeai as genai

# Configure Gemini from environment variable
api_key = os.getenv('GOOGLE_API_KEY')
if not api_key:
    print("Error: GOOGLE_API_KEY environment variable not set")
    exit(1)

try:
    model = genai.GenerativeModel('gemini-pro')
    print("Successfully initialized model")
except Exception as e:
    print(f"Failed to initialize model. Error: {str(e)}")
    exit(1)

log_files = glob.glob('Docs/log/git-log-*.md')
if not log_files:
    print("No log files found")
    exit(1)

latest_log = max(log_files)
with open(latest_log, 'r') as f:
    log_content = f.read()

query = '${{ github.event.inputs.query }}'
prompt = f"""
Analyze this git log and {query}:

{log_content}

Please provide:
1. A summary of key changes
2. Any patterns or trends you notice
3. Recommendations if applicable
"""

try:
    response = model.generate_content(prompt)
    print(response.text)
except Exception as e:
    print(f"Error generating content: {str(e)}")
    exit(1)
EOF

          echo "# Gemini Analysis" > "Docs/analysis/gemini-analysis-$(date +%Y-%m-%d).md"
          echo "Generated at: $(date)" >> "Docs/analysis/gemini-analysis-$(date +%Y-%m-%d).md"
          echo "## Analysis Results" >> "Docs/analysis/gemini-analysis-$(date +%Y-%m-%d).md"
          python analyze_logs.py >> "Docs/analysis/gemini-analysis-$(date +%Y-%m-%d).md"

      - name: Commit Analysis
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add "Docs/analysis/gemini-analysis-$(date +%Y-%m-%d).md"
          git commit -m "docs: add Gemini analysis for $(date +%Y-%m-%d)" || echo "No changes to commit"
          git push origin HEAD:main
