name: Gemini Log Analysis

on:
  workflow_dispatch:
    inputs:
      days:
        description: 'Number of days of logs to analyze'
        required: false
        default: '1'
        type: string
      query:
        description: 'What would you like to ask about the logs?'
        required: false
        default: 'Summarize the main changes'
        type: string

jobs:
  analyze-logs:
    runs-on: ubuntu-latest
    environment: LLM_API_KEY
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install --upgrade google-generativeai
        pip install python-dotenv

    - name: Analyze Logs with Gemini
      env:
        GOOGLE_API_KEY: ${{ secrets.GITHUBGEMINIKEY }}
      run: |
        cat << 'EOF' > analyze_logs.py
        import os
        import glob
        from datetime import datetime
        import google.generativeai as genai

        # Configure Gemini
        genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))
        
        # Initialize model
        model = genai.GenerativeModel('models/gemini-1.0-pro')

        # Get the latest log file
        log_files = glob.glob('Docs/log/git-log-*.md')
        if not log_files:
            print("No log files found")
            exit(1)

        latest_log = max(log_files)
        with open(latest_log, 'r') as f:
            log_content = f.read()

        # Prepare the prompt
        query = '${{ github.event.inputs.query }}'
        prompt = f"""
        You are an AI assistant specializing in analyzing Git commit logs. Your task is to process the following Git log data and transform it into a structured, human-readable summary. Focus on identifying key activities, trends, and patterns, such as major feature additions, bug fixes, refactoring, and notable contributors. Summarize commit messages concisely while maintaining their context. If possible, categorize the commits into meaningful sections (e.g., Features, Bug Fixes, Documentation Updates, Refactoring). Ensure that the final output is well-organized and easy to understand. Format the result in Markdown (.md) for clear readability. Below is the Git log data to analyze:

        {log_content}

        Please provide:
        1. A summary of key changes
        2. Any patterns or trends you notice
        3. Recommendations if applicable
        """

        try:
            response = model.generate_content(prompt)
            
            # Format output as markdown
            output = f"""# Gemini Analysis
Generated at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Analysis Results

{response.text}
"""
            # Write to file
            with open(f'Docs/analysis/gemini-analysis-{datetime.now().strftime("%Y-%m-%d")}.md', 'w') as f:
                f.write(output)
                
        except Exception as e:
            print(f"Error: {str(e)}")
            exit(1)
        EOF

        python analyze_logs.py

    - name: Commit Analysis
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add "Docs/analysis/gemini-analysis-$(date +%Y-%m-%d).md"
        git commit -m "docs: add Gemini analysis for $(date +%Y-%m-%d)" || echo "No changes to commit"
        git push origin HEAD:main