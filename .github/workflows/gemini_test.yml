name: Gemini Log Analysis

on:
  workflow_dispatch:
    inputs:
      days:
        description: 'Number of days of logs to analyze'
        required: false
        default: '1'
        type: string
      query:
        description: 'What would you like to ask about the logs?'
        required: false
        default: 'Summarize the main changes'
        type: string

jobs:
  analyze-logs:
    runs-on: ubuntu-latest
    environment: LLM_API_KEY
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install --upgrade google-generativeai
        pip install python-dotenv

    - name: Analyze Logs with Gemini
      env:
        GOOGLE_API_KEY: ${{ secrets.GITHUBGEMINIKEY }}
      run: |
        # Create Python script
        cat << 'EOF' > analyze_logs.py
        import os
        import glob
        import google.generativeai as genai
        
        # Configure Gemini
        api_key = "AIzaSyBBAly2UC4CJfxfvEHATR5W8RVbFFIvHkc"
        genai.configure(api_key=api_key)
        
        # Initialize model with correct name
        model = genai.GenerativeModel('gemini-2.0-flash')  # Using latest stable version
        
        # Use absolute path for glob
        workspace = os.getenv('GITHUB_WORKSPACE', '.')
        log_files = glob.glob(os.path.join(workspace, 'Docs/log/git-log-*.md'))
        if not log_files:
            print("No log files found in:", os.path.join(workspace, 'Docs/log/'))
            exit(1)
        
        latest_log = max(log_files)
        with open(latest_log, 'r') as f:
            log_content = f.read()
            
        query = '${{ github.event.inputs.query }}'
        prompt = f"""
        Analyze this git log and {query}:

        {log_content}

        Please provide:
        1. A summary of key changes
        2. Any patterns or trends you notice
        3. Recommendations if applicable
        """

        try:
            response = model.generate_content(prompt)
            print(response.text)
        except Exception as e:
            print(f"Error generating content: {str(e)}")
            exit(1)
        EOF

        

        # Write directly to the analysis file
        echo "# Gemini Analysis" > Docs/analysis/gemini-analysis-$(date +%Y-%m-%d).md
        echo "Generated at: $(date)" >> Docs/analysis/gemini-analysis-$(date +%Y-%m-%d).md
        echo "## Analysis Results" >> Docs/analysis/gemini-analysis-$(date +%Y-%m-%d).md
        python3 analyze_logs.py >> Docs/analysis/gemini-analysis-$(date +%Y-%m-%d).md