name: Gemini Log Analysis

on:
  workflow_dispatch:
    inputs:
      days:
        description: 'Number of days of logs to analyze'
        required: false
        default: '1'
        type: string
      query:
        description: 'What would you like to ask about the logs?'
        required: false
        default: 'Summarize the main changes'
        type: string

jobs:
  analyze-logs:
    runs-on: ubuntu-latest
    permissions:
      contents: write    # Add permissions for repository contents
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install --upgrade google-generativeai
        pip install python-dotenv

    - name: Analyze Logs with Gemini
      env:
        GOOGLE_API_KEY: AIzaSyBZ52gRnYBjfyyh4jiEWscKoRfTx-j4YEQ
      run: |
        cat << 'EOF' > analyze_logs.py
        import os
        import glob
        from datetime import datetime
        import google.generativeai as genai

        # Configure Gemini
        genai.configure(api_key="AIzaSyBZ52gRnYBjfyyh4jiEWscKoRfTx-j4YEQ")
        model = genai.GenerativeModel('gemini-2.0-flash')

        # Analyze group log
        log_files = glob.glob('users/git-log-*.md')
        if log_files:
            latest_log = max(log_files)
            with open(latest_log, 'r') as f:
                group_content = f.read()

            query = '${{ github.event.inputs.query }}'
            group_prompt = f"""
            Analyze this team's git log and {query}:

            {group_content}

            Please provide:
            1. A summary of key changes
            2. Team collaboration patterns
            3. Project progress analysis
            4. Recommendations for the team
            """

            response = model.generate_content(group_prompt)
            os.makedirs('analysis/group', exist_ok=True)
            with open(f'analysis/group/team-analysis-{datetime.now().strftime("%Y-%m-%d")}.md', 'w') as f:
                f.write(f"# Team Analysis\nGenerated at: {datetime.now()}\n\n{response.text}")

        # Analyze individual user logs
        user_dirs = glob.glob('users/*/')
        for user_dir in user_dirs:
            username = os.path.basename(os.path.dirname(user_dir))
            if username == '.gitkeep':
                continue

            user_logs = glob.glob(f'{user_dir}git-log-*.md')
            if user_logs:
                latest_user_log = max(user_logs)
                with open(latest_user_log, 'r') as f:
                    user_content = f.read()

                user_prompt = f"""
                Analyze this developer's git activity and {query}:

                {user_content}

                Please provide:
                1. Individual contribution summary
                2. Work patterns and focus areas
                3. Technical expertise demonstrated
                4. Specific recommendations
                """

                response = model.generate_content(user_prompt)
                os.makedirs(f'analysis/users/{username}', exist_ok=True)
                with open(f'analysis/users/{username}/analysis-{datetime.now().strftime("%Y-%m-%d")}.md', 'w') as f:
                    f.write(f"# Developer Analysis - {username}\nGenerated at: {datetime.now()}\n\n{response.text}")
        EOF

        python analyze_logs.py

    - name: Commit Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        # Add files if they exist
        if [ -d "analysis/group" ]; then
          git add "analysis/group"
        fi
        if [ -d "analysis/users" ]; then
          git add "analysis/users"
        fi
        if [ -f "analyze_logs.py" ]; then
          git add "analyze_logs.py"
        fi
        git commit -m "docs: add team and individual analyses for $(date +%Y-%m-%d)" || echo "No changes to commit"
        git push origin HEAD:main