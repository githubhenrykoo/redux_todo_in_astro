name: Gemini Log Analysis

on:
  workflow_dispatch:
    inputs:
      days:
        description: 'Number of days of logs to analyze'
        required: false
        default: '1'
        type: string
      query:
        description: 'What would you like to ask about the logs?'
        required: false
        default: 'Summarize the main changes'
        type: string

jobs:
  analyze-logs:
    runs-on: ubuntu-latest
    permissions:
      contents: write    # Add permissions for repository contents
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install --upgrade google-generativeai
        pip install python-dotenv

    - name: Analyze Logs with Gemini
      env:
        GOOGLE_API_KEY: AIzaSyBZ52gRnYBjfyyh4jiEWscKoRfTx-j4YEQ
      run: |
        cat << 'EOF' > analyze_logs.py
        import os
        import glob
        from datetime import datetime, timedelta
        import google.generativeai as genai

        # Configure Gemini
        genai.configure(api_key="AIzaSyBZ52gRnYBjfyyh4jiEWscKoRfTx-j4YEQ")
        model = genai.GenerativeModel('gemini-2.0-flash')

        # Get the latest log file
        log_files = glob.glob('Docs/log/git-log-*.md')
        if not log_files:
            print("No log files found")
            exit(1)

        latest_log = max(log_files)
        with open(latest_log, 'r') as f:
            log_content = f.read()

        # First analysis
        query = '${{ github.event.inputs.query }}'
        initial_prompt = f"""
        Analyze this git log and {query}:

        {log_content}

        Please provide:
        1. A summary of key changes
        2. Any patterns or trends you notice
        3. Recommendations if applicable
        """

        # Get initial analysis
        initial_response = model.generate_content(initial_prompt)
        
        # Critique prompt
        critique_prompt = f"""
        Review and critique the following analysis:

        {initial_response.text}

        Title:
        Daily Git Log Analysis Critique

        Analyze this report following these sections:
        - Completeness
        - Clarity
        - Structure
        - Technical Depth
        - Actionable Insights
        - Team Contribution Visibility
        - Workflow Critique
        - Key Takeaways (5-15 items)
        - One-Sentence-Summary
        - Quotes (10-20 relevant items)
        - Improvement Suggestions (minimum 5)
        """

        # Get critique
        critique_response = model.generate_content(critique_prompt)
        
        # Combine outputs
        final_output = f"""# Gemini Analysis
Generated at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Initial Analysis
{initial_response.text}

## Critique and Refinement
{critique_response.text}
"""
        print(final_output)
        EOF

        python analyze_logs.py

    - name: Save Analysis
      run: |
    
        python analyze_logs.py > "Docs/analysis/gemini-analysis-$(date +%Y-%m-%d).md"

    - name: Commit Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
        git add Docs/analysis/
        git commit -m "docs: add Gemini analysis for $(date +%Y-%m-%d)" || echo "No changes to commit"
        git push origin HEAD:main