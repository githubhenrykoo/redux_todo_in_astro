name: Markdown to PDF Converter

on:
  workflow_dispatch:
    inputs:
      markdown_file:
        description: 'Path to markdown file'
        required: true
        type: string
        default: 'Docs/analysis/gemini-analysis-2025-03-04.md'
permissions:
  contents: write

jobs:
  convert-to-pdf:
    runs-on: ubuntu-latest
    environment: LLM_API_KEY

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y texlive-latex-base texlive-fonts-recommended texlive-latex-extra texlive-pictures
        pip install --upgrade google-generativeai
        pip install python-dotenv

    - name: Convert MD to PDF
      env:
        GOOGLE_API_KEY: "AIzaSyBZ52gRnYBjfyyh4jiEWscKoRfTx-j4YEQ"
        MARKDOWN_FILE: ${{ github.event.inputs.markdown_file }}
      run: |
        # Copy the existing convert_md_to_pdf.py from Docs/analysis
        cp Docs/analysis/convert_md_to_pdf.py .
        
        # Run the conversion script with debug info
        echo "Current directory: $(pwd)"
        echo "Directory contents before conversion:"
        ls -la
        # Temporarily disable cleanup in the script
        sed -i 's/os.remove(aux_file)/# os.remove(aux_file)/' convert_md_to_pdf.py
        python convert_md_to_pdf.py
        echo "Directory contents after conversion:"
        ls -la

    - name: Debug LaTeX Output
      if: always()
      run: |
        echo "Generated files:"
        ls -la *.tex *.pdf *.log || true
        for logfile in *.log; do
          if [ -f "$logfile" ]; then
            echo "Contents of $logfile:"
            cat "$logfile"
          fi
        done

    - name: Upload PDF artifact
      uses: actions/upload-artifact@v4  # Updated from v3 to v4
      with:
        name: converted-pdf
        path: "*.pdf"

    - name: Debug file location
      run: |
        pwd
        ls -la
        echo "Looking for PDF in current directory"

    - name: Commit PDF
      run: |
        input_file="${{ github.event.inputs.markdown_file }}"
        pdf_name=$(basename "${input_file%.md}.pdf")
        echo "Looking for PDF file: $pdf_name"
        
        if [ -f "$pdf_name" ]; then
          echo "PDF file found"
          # Create directory if it doesn't exist
          mkdir -p $(dirname "$input_file")
          # Move PDF to the correct location
          mv "$pdf_name" "${input_file%.md}.pdf"
          
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add "${input_file%.md}.pdf"
          git commit -m "docs: convert markdown to PDF"
          git push origin HEAD:main
        else
          echo "PDF file not found at: $pdf_name"
          echo "Current directory contents:"
          ls -la
          exit 1
        fi

        git add "*.pdf"
        git commit -m "docs: convert markdown to PDF" || echo "No changes to commit"
        git push origin HEAD:main