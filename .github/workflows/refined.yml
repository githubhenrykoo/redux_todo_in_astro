name: Refine Analysis

on:
  workflow_dispatch:
    inputs:
      analysis_date:
        description: 'Date of analysis to refine (YYYY-MM-DD)'
        required: true
        type: string

jobs:
  refine-analysis:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        pip install --upgrade google-generativeai
        pip install python-dotenv

    - name: Refine Analysis
      env:
        GOOGLE_API_KEY: AIzaSyBZ52gRnYBjfyyh4jiEWscKoRfTx-j4YEQ
      run: |
       
        cat << 'EOF' > refine_analysis.py
        import os
        import glob
        from datetime import datetime
        import google.generativeai as genai

        # Configure Gemini
        genai.configure(api_key="AIzaSyBZ52gRnYBjfyyh4jiEWscKoRfTx-j4YEQ")
        model = genai.GenerativeModel('gemini-2.0-flash')

        # Get the analysis file
        analysis_date = '${{ github.event.inputs.analysis_date }}'
        analysis_file = f'Docs/analysis/gemini-analysis-{analysis_date}.md'
        
        if not os.path.exists(analysis_file):
            print(f"Analysis file not found: {analysis_file}")
            exit(1)

        with open(analysis_file, 'r') as f:
            analysis_content = f.read()

        critique_prompt = f"""
        Review and critique the following analysis report:

        {analysis_content}

        Provide a structured critique following these sections:
        - Title
        - Completeness
        - Clarity
        - Structure
        - Technical Depth
        - Actionable Insights
        - Team Contribution Visibility
        - Workflow Critique
        - Key Takeaways (5-15 items)
        - One-Sentence-Summary
        - Quotes (10-20 relevant items)
        - Improvement Suggestions (minimum 5)
        """

        try:
            # Get initial critique
            critique_response = model.generate_content(critique_prompt)
            
            # Use critique to generate enhanced analysis
            enhancement_prompt = f"""
            Using this critique as guidance:
            {critique_response.text}
            
            Rewrite and enhance the following analysis in a clear, structured way:
            {analysis_content}
            """
            
            enhanced_response = model.generate_content(enhancement_prompt)
            
            # Output only the enhanced version
            refined_output = f"""# Enhanced Analysis
            Generated at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

            {enhanced_response.text}
            """
            
            refined_file = f'Docs/analysis/refined-{analysis_date}.md'
            with open(refined_file, 'w') as f:
                f.write(refined_output)
        except Exception as e:
            print(f"Error: {str(e)}")
            exit(1)
        EOF

        python refine_analysis.py

    - name: Commit Refined Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
        git add "Docs/analysis/refined-${{ github.event.inputs.analysis_date }}.md"
        git commit -m "docs: add refined analysis for ${{ github.event.inputs.analysis_date }}" || echo "No changes to commit"
        git push origin HEAD:main