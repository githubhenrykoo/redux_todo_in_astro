function _(f){if(!f)throw new Error("Authentik client configuration is required");const{clientId:d,clientSecret:u,redirectUri:h,scopes:k,baseUrl:w,storageKey:s}=f;if(!w)throw new Error("Authentik base URL is required");if(!u)throw new Error("Client secret is required for this Authentik application");return{login:async o=>{try{const r=(w||"").toString().replace(/\/+$/,"");if(!r)throw new Error("Invalid Authentik base URL");const a=o||(typeof window<"u"?window.location.pathname+window.location.search:"/");console.log("DEBUG LOGIN - Storing URL:",{originalUrl:o,currentUrl:a,windowLocation:typeof window<"u"?window.location.href:"No window"});const n=`${r}/application/o/authorize/`,t=new URL(n);t.searchParams.set("client_id",d),t.searchParams.set("redirect_uri",h),t.searchParams.set("response_type","code"),t.searchParams.set("scope",k),localStorage.setItem(`${s}redirect_uri`,a),window.location.href=t.toString()}catch(r){throw console.error("Login initialization failed:",r),r}},handleCallback:async o=>{try{const r=(w||"").toString().replace(/\/+$/,"");if(!r)throw new Error("Invalid Authentik base URL");if(!o)throw new Error("Authorization code is required");if(!d)throw new Error("Client ID is required");if(!u)throw new Error("Client Secret is required");if(!h)throw new Error("Redirect URI is required");const a=new URL(`${r}/application/o/token/`);console.log("DEBUG TOKEN EXCHANGE CONFIGURATION:",{tokenUrl:a.toString(),clientId:d,redirectUri:h,baseUrl:r,codeLength:o.length,clientSecretLength:u.length});const n=new URLSearchParams;n.append("client_id",d),n.append("client_secret",u),n.append("redirect_uri",h),n.append("grant_type","authorization_code"),n.append("code",o),console.log("DEBUG TOKEN EXCHANGE PARAMS:",{params:Object.fromEntries(n.entries())});let t;try{t=await fetch(a.toString(),{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded",Accept:"application/json"},body:n.toString()})}catch(e){const c=e instanceof Error?{errorName:e.name,errorMessage:e.message,errorStack:e.stack}:{errorName:"Unknown Fetch Error",errorMessage:String(e),errorStack:null};throw console.error("Fetch Error during token exchange:",{...c,tokenUrl:a.toString(),clientIdUsed:d,redirectUriUsed:h}),new Error(`Network error during token exchange: ${c.errorMessage}`)}const p=Object.fromEntries(t.headers.entries()),E={ok:t.ok,status:t.status,statusText:t.statusText};if(console.log("Token Exchange Response Details:",{...E,headers:p}),!t.ok){const e=await t.text();throw console.error("Token Exchange Error:",{status:t.status,statusText:t.statusText,errorBody:e,requestParams:Object.fromEntries(n)}),new Error(`Failed to exchange authorization code. Status: ${t.status}, Error: ${e}`)}let i;try{i=await t.json(),console.log("Token Response Parsed:",{hasAccessToken:!!i.access_token,hasIdToken:!!i.id_token,tokenKeys:Object.keys(i)})}catch(e){const c=e instanceof Error?{errorName:e.name,errorMessage:e.message,errorStack:e.stack}:{errorName:"Unknown Parse Error",errorMessage:String(e),errorStack:null};throw console.error("Token Parse Error:",c),new Error(`Failed to parse token response: ${c.errorMessage}`)}if(!i.access_token)throw new Error("No access token received");localStorage.setItem(`${s}access_token`,i.access_token),localStorage.setItem(`${s}id_token`,i.id_token||"");const m=new URL(`${r}/application/o/userinfo/`);let l;try{l=await fetch(m.toString(),{headers:{Authorization:`Bearer ${i.access_token}`}})}catch(e){const c=e instanceof Error?{errorName:e.name,errorMessage:e.message,errorStack:e.stack}:{errorName:"Unknown Fetch Error",errorMessage:String(e),errorStack:null};throw console.error("Fetch User Info Error:",c),new Error(`Network error fetching user info: ${c.errorMessage}`)}if(!l.ok){const e=await l.text();throw console.error("User Info Fetch Error:",{status:l.status,statusText:l.statusText,errorBody:e}),new Error(`Failed to fetch user info. Status: ${l.status}, Error: ${e}`)}const g=await l.json();return console.log("User Info Retrieved:",{userInfoKeys:Object.keys(g)}),localStorage.setItem(`${s}user_info`,JSON.stringify(g)),typeof window<"u"&&(window.location.href=`${window.location.origin}/Page`),g}catch(r){const a=r instanceof Error?{errorName:r.name,errorMessage:r.message,errorStack:r.stack}:{errorName:"Unknown Error",errorMessage:String(r),errorStack:null};throw console.error("Authentication callback failed:",a),r}},logout:async()=>{try{const o=(w||"").toString().replace(/\/+$/,"");if(!o)throw new Error("Invalid Authentik base URL");localStorage.removeItem(`${s}access_token`),localStorage.removeItem(`${s}id_token`),localStorage.removeItem(`${s}user_info`);const r=new URL(`${o}/application/o/end-session/`);r.searchParams.set("client_id",d),r.searchParams.set("post_logout_redirect_uri",h),window.location.href=r.toString()}catch(o){throw console.error("Logout failed:",o),o}},getUserInfo:async()=>{try{const o=localStorage.getItem(`${s}user_info`);if(o)try{return JSON.parse(o)}catch{return null}return null}catch(o){return console.error("Failed to get user info:",o),null}}}}export{_ as createClient};
