FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Install build dependencies for native modules including SQLite
RUN apk add --no-cache python3 make g++ python3-dev py3-setuptools sqlite sqlite-dev

# Install dependencies based on the preferred package manager
COPY package.json package-lock.json* ./
RUN npm ci

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Disable Astro telemetry
ENV ASTRO_TELEMETRY_DISABLED=1

# Build the application in original server mode
RUN npm run build:nocheck || (echo "Build failed but continuing to use what was built")

# List directories to see what was actually built
RUN ls -la && \
    ls -la dist || true && \
    ls -la .vercel/output/functions/_render.func/dist/server || true

# Production image, copy all the files and run a wrapper server
FROM base AS runner
WORKDIR /app

# Install Express for our wrapper server
RUN npm install express

# Set up non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 astro

# Copy all the necessary files from builder
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/public ./public
COPY --from=builder /app/.vercel/output ./output
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Copy our custom wrapper server
COPY Kubernetes/server.wrapper.cjs ./server.wrapper.cjs

# Set proper ownership
RUN chown -R astro:nodejs /app

# Switch to non-root user
USER astro

# Expose port
EXPOSE 3000

# Environment variables
ENV NODE_ENV=production
ENV HOST=0.0.0.0
ENV PORT=3000
ENV ASTRO_TELEMETRY_DISABLED=1

# Start the wrapper server
CMD ["node", "server.wrapper.cjs"]
