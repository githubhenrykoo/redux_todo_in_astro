---
import { cn } from '../../lib/utils';
import { FaCode, FaTerminal, FaCog, FaCube, FaFile, FaMicrophone, FaBrain, FaYoutube, FaCamera } from 'react-icons/fa';
import { store } from '../../store';
import { changeLayout } from '../../features/panellayoutSlice';

interface Props {
  class?: string;
}

const { class: className, ...props } = Astro.props;

---

<div class={cn(
  "flex flex-col h-full bg-muted border-r border-neutral-200 dark:border-neutral-800",
  className
)} {...props}>
  <div class="flex-1 flex flex-col justify-between py-4">
    <div class="space-y-6">
      <button
        id="todoLayoutBtn"
        class="flex items-center justify-center w-12 h-12 hover:bg-muted-foreground/10 transition-colors border-l-2 border-primary bg-muted"
      >
        <FaCode className="text-lg text-primary" />
      </button>
      <button
        id="generateLayoutBtn"
        class="flex items-center justify-center w-12 h-12 hover:bg-muted-foreground/10 transition-colors"
      >
        <FaTerminal className="text-lg text-muted-foreground" />
      </button>
      <button
        id="clmLayoutBtn"
        title="Cubical Logic Model Editor"
        class="flex items-center justify-center w-12 h-12 hover:bg-muted-foreground/10 transition-colors group relative"
      >
        <FaCube className="text-lg text-muted-foreground group-hover:text-primary transition-colors" />
        <span class="absolute left-full ml-2 bg-neutral-700 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none">
          CLM Editor
        </span>
      </button>
      <button
        id="fileLayoutBtn"
        title="File Table View"
        class="flex items-center justify-center w-12 h-12 hover:bg-muted-foreground/10 transition-colors group relative"
      >
        <FaFile className="text-lg text-muted-foreground group-hover:text-primary transition-colors" />
        <span class="absolute left-full ml-2 bg-neutral-700 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none">
          File Table
        </span>
      </button>
      <button
        id="mqttDashboardLayoutBtn"
        title="MQTT Dashboard"
        class="flex items-center justify-center w-12 h-12 hover:bg-muted-foreground/10 transition-colors group relative"
      >
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
          <line x1="8" y1="21" x2="16" y2="21"></line>
          <line x1="12" y1="17" x2="12" y2="21"></line>
          <path d="M6 8h.01M9 8h.01M12 8h.01M15 8h.01M18 8h.01M6 12h.01M9 12h.01M12 12h.01M15 12h.01M18 12h.01"></path>
        </svg>
        <span class="absolute left-full ml-2 bg-neutral-700 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none">
          MQTT Dashboard
        </span>
      </button>
      <button
        id="youtubeLayoutBtn"
        title="YouTube Video Player"
        class="flex items-center justify-center w-12 h-12 hover:bg-muted-foreground/10 transition-colors group relative"
      >
        <FaYoutube className="text-lg text-muted-foreground group-hover:text-primary transition-colors" />
        <span class="absolute left-full ml-2 bg-neutral-700 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none">
          YouTube Player
        </span>
      </button>
      <button
        id="cameraLayoutBtn"
        title="Camera"
        class="flex items-center justify-center w-12 h-12 hover:bg-muted-foreground/10 transition-colors group relative"
      >
        <FaCamera className="text-lg text-muted-foreground group-hover:text-primary transition-colors" />
        <span class="absolute left-full ml-2 bg-neutral-700 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none">
          Camera
        </span>
      </button>
      <button
        id="transcriptionLayoutBtn"
        title="AI Training Data"
        class="flex items-center justify-center w-12 h-12 hover:bg-muted-foreground/10 transition-colors group relative hidden"
      >
        <FaBrain className="text-lg text-muted-foreground group-hover:text-primary transition-colors" />
        <span class="absolute left-full ml-2 bg-neutral-700 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none">
          AI Training Data
        </span>
      </button>
    </div>
    <div>
      <div class="flex items-center justify-center w-12 h-12 hover:bg-muted-foreground/10 transition-colors">
        <FaCog className="text-lg text-muted-foreground" />
      </div>
    </div>
  </div>
</div>

<script>
  import { store } from '../../store';
  import { changeLayout } from '../../features/panellayoutSlice';

  // Get button elements
  const todoLayoutBtn = document.getElementById('todoLayoutBtn');
  const generateLayoutBtn = document.getElementById('generateLayoutBtn');
  const clmLayoutBtn = document.getElementById('clmLayoutBtn');
  const fileLayoutBtn = document.getElementById('fileLayoutBtn');
  const mqttDashboardLayoutBtn = document.getElementById('mqttDashboardLayoutBtn');
  const youtubeLayoutBtn = document.getElementById('youtubeLayoutBtn');
  const cameraLayoutBtn = document.getElementById('cameraLayoutBtn');
  const transcriptionLayoutBtn = document.getElementById('transcriptionLayoutBtn');

  // Add click handlers
  todoLayoutBtn?.addEventListener('click', () => {
    store.dispatch(changeLayout('todo_layout'));
  });

  generateLayoutBtn?.addEventListener('click', () => {
    store.dispatch(changeLayout('generate_layout'));
  });

  clmLayoutBtn?.addEventListener('click', () => {
    store.dispatch(changeLayout('clm_layout'));
  });

  fileLayoutBtn?.addEventListener('click', () => {
    store.dispatch(changeLayout('file_table_layout'));
  });

  mqttDashboardLayoutBtn?.addEventListener('click', () => {
    store.dispatch(changeLayout('mqtt_dashboard_layout'));
  });

  youtubeLayoutBtn?.addEventListener('click', () => {
    store.dispatch(changeLayout('youtube_layout'));
  });

  cameraLayoutBtn?.addEventListener('click', () => {
    store.dispatch(changeLayout('camera_layout'));
  });

  transcriptionLayoutBtn?.addEventListener('click', () => {
    store.dispatch(changeLayout('transcription_layout'));
  });

  // Function to update active button styles
  function updateActiveButton(layout: string) {
    // Remove active styles from all buttons
    todoLayoutBtn?.classList.remove('border-l-2', 'border-primary', 'bg-muted');
    generateLayoutBtn?.classList.remove('border-l-2', 'border-primary', 'bg-muted');
    clmLayoutBtn?.classList.remove('border-l-2', 'border-primary', 'bg-muted');
    fileLayoutBtn?.classList.remove('border-l-2', 'border-primary', 'bg-muted');
    mqttDashboardLayoutBtn?.classList.remove('border-l-2', 'border-primary', 'bg-muted');
    youtubeLayoutBtn?.classList.remove('border-l-2', 'border-primary', 'bg-muted');
    cameraLayoutBtn?.classList.remove('border-l-2', 'border-primary', 'bg-muted');
    transcriptionLayoutBtn?.classList.remove('border-l-2', 'border-primary', 'bg-muted');

    // Reset icon colors
    todoLayoutBtn?.querySelector('.text-primary')?.classList.replace('text-primary', 'text-muted-foreground');
    generateLayoutBtn?.querySelector('.text-primary')?.classList.replace('text-primary', 'text-muted-foreground');
    clmLayoutBtn?.querySelector('.text-primary')?.classList.replace('text-primary', 'text-muted-foreground');
    fileLayoutBtn?.querySelector('.text-primary')?.classList.replace('text-primary', 'text-muted-foreground');
    mqttDashboardLayoutBtn?.querySelector('.text-primary')?.classList.replace('text-primary', 'text-muted-foreground');
    youtubeLayoutBtn?.querySelector('.text-primary')?.classList.replace('text-primary', 'text-muted-foreground');
    cameraLayoutBtn?.querySelector('.text-primary')?.classList.replace('text-primary', 'text-muted-foreground');
    transcriptionLayoutBtn?.querySelector('.text-primary')?.classList.replace('text-primary', 'text-muted-foreground');

    // Add active styles to the selected button
    if (layout === 'todo_layout') {
      todoLayoutBtn?.classList.add('border-l-2', 'border-primary', 'bg-muted');
      todoLayoutBtn?.querySelector('.text-muted-foreground')?.classList.replace('text-muted-foreground', 'text-primary');
    } else if (layout === 'generate_layout') {
      generateLayoutBtn?.classList.add('border-l-2', 'border-primary', 'bg-muted');
      generateLayoutBtn?.querySelector('.text-muted-foreground')?.classList.replace('text-muted-foreground', 'text-primary');
    } else if (layout === 'clm_layout') {
      clmLayoutBtn?.classList.add('border-l-2', 'border-primary', 'bg-muted');
      clmLayoutBtn?.querySelector('.text-muted-foreground')?.classList.replace('text-muted-foreground', 'text-primary');
    } else if (layout === 'file_table_layout') {
      fileLayoutBtn?.classList.add('border-l-2', 'border-primary', 'bg-muted');
      fileLayoutBtn?.querySelector('.text-muted-foreground')?.classList.replace('text-muted-foreground', 'text-primary');
    } else if (layout === 'mqtt_dashboard_layout') {
      mqttDashboardLayoutBtn?.classList.add('border-l-2', 'border-primary', 'bg-muted');
      mqttDashboardLayoutBtn?.querySelector('.text-muted-foreground')?.classList.replace('text-muted-foreground', 'text-primary');
    } else if (layout === 'youtube_layout') {
      youtubeLayoutBtn?.classList.add('border-l-2', 'border-primary', 'bg-muted');
      youtubeLayoutBtn?.querySelector('.text-muted-foreground')?.classList.replace('text-muted-foreground', 'text-primary');
    } else if (layout === 'camera_layout') {
      cameraLayoutBtn?.classList.add('border-l-2', 'border-primary', 'bg-muted');
      cameraLayoutBtn?.querySelector('.text-muted-foreground')?.classList.replace('text-muted-foreground', 'text-primary');
    } else if (layout === 'transcription_layout') {
      transcriptionLayoutBtn?.classList.add('border-l-2', 'border-primary', 'bg-muted');
      transcriptionLayoutBtn?.querySelector('.text-muted-foreground')?.classList.replace('text-muted-foreground', 'text-primary');
    }
  }

  // Function to determine current layout from state
  const updateLayoutFromState = (state: any) => {
    const panels = state.panellayout.panels || { right: { type: 'TodoPanel' } };
    if (panels.right.type === 'GeneratePanel') return 'generate_layout';
    if (panels.right.type === 'CLMInputPanel') return 'clm_layout';
    if (panels.middle?.type === 'CLMInputPanel' && panels.right?.type === 'ContentDetailPanel') return 'file_table_layout';
    if (panels.middle?.type === 'SimpleMQTTDashboardPanel') return 'mqtt_dashboard_layout';
    if (panels.middle?.type === 'YouTubePanel') return 'youtube_layout';
    if (panels.right.type === 'TranscriptionPanel') return 'transcription_layout';
    if (panels.right.type === 'CameraPanel') return 'camera_layout';
    return 'todo_layout';
  };

  // Initialize button state based on current layout
  updateActiveButton(updateLayoutFromState(store.getState()));

  // Subscribe to store changes to update button states
  store.subscribe(() => {
    updateActiveButton(updateLayoutFromState(store.getState()));
  });
</script>
