---
import { FiSun, FiMoon } from 'react-icons/fi';
import { store } from '../../store';
import { cn } from '../../utils/cn';
import AuthentikPanel from '../auth/AuthentikPanel';

// Get initial theme mode from store
const themeMode = store.getState().theme?.mode || 'light';

// Optional props with default values
interface Props {
  className?: string;
  [key: string]: any;
}

const { 
  className = '', 
  ...props 
} = Astro.props;
---

<div class={cn(
  "w-full h-full bg-background border-b flex items-center px-6",
  className
)} {...props}>
  <div class="flex justify-between items-center w-full">
    <h1 class="text-xl font-semibold text-foreground">Redux Todo App</h1>
    <div class="flex items-center space-x-4">
      <AuthentikPanel 
        client:only={true}
        config={{
          clientId: import.meta.env.AUTHENTIK_CLIENT_ID,
          redirectUri: `${Astro.url.protocol}//${Astro.url.host}/callback`,
          scopes: import.meta.env.AUTHENTIK_SCOPES,
          baseUrl: import.meta.env.AUTHENTIK_URL,
          storageKey: `${import.meta.env.AUTHENTIK_STORAGE_KEY_PREFIX || 'authentik_'}top_banner_auth`,
        }}
        renderUserInfo={(userInfo) => (
          <div class="flex items-center space-x-2">
            {userInfo?.picture ? (
              <img 
                src={userInfo.picture} 
                alt={userInfo.name || 'User'} 
                class="w-8 h-8 rounded-full object-cover"
              />
            ) : (
              <div class="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600">
                {userInfo?.name ? userInfo.name.charAt(0).toUpperCase() : ''}
              </div>
            )}
            <div class="hidden md:block">
              <p class="text-sm font-medium text-foreground">
                {userInfo?.name || 'Guest'}
              </p>
              <p class="text-xs text-muted-foreground">
                {userInfo?.email ? userInfo.email.split('@')[0] : 'Not logged in'}
              </p>
            </div>
          </div>
        )}
        customLoginButton={(isLoading) => (
          <button 
            disabled={isLoading}
            class={cn(
              "flex items-center justify-center w-8 h-8 rounded-full transition-colors",
              isLoading 
                ? "bg-gray-200 cursor-not-allowed" 
                : "bg-blue-100 text-blue-600 hover:bg-blue-200"
            )}
            aria-label="Login"
          >
            {isLoading ? (
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className="animate-spin h-5 w-5 text-blue-600" 
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle 
                  className="opacity-25" 
                  cx="12" 
                  cy="12" 
                  r="10" 
                  stroke="currentColor" 
                  strokeWidth="4"
                />
                <path 
                  className="opacity-75" 
                  fill="currentColor" 
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                />
              </svg>
            ) : (
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className="h-5 w-5" 
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" />
                <circle cx="12" cy="7" r="4" />
              </svg>
            )}
          </button>
        )}
        customLogoutButton={(isLoading) => (
          <button 
            disabled={isLoading}
            class={cn(
              "flex items-center justify-center w-8 h-8 rounded-full transition-colors",
              isLoading 
                ? "bg-gray-200 cursor-not-allowed" 
                : "hover:bg-gray-200"
            )}
            aria-label="Logout"
          >
            {isLoading ? (
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className="animate-spin h-5 w-5 text-gray-600" 
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle 
                  className="opacity-25" 
                  cx="12" 
                  cy="12" 
                  r="10" 
                  stroke="currentColor" 
                  strokeWidth="4"
                />
                <path 
                  className="opacity-75" 
                  fill="currentColor" 
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                />
              </svg>
            ) : (
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className="h-5 w-5 text-gray-600" 
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4" />
                <polyline points="16 17 21 12 16 7" />
                <line x1="21" y1="12" x2="9" y2="12" />
              </svg>
            )}
          </button>
        )}
      />
      <button 
        onclick="window.handleThemeToggle()"
        class="text-foreground hover:text-foreground/80"
        aria-label="Toggle theme"
      >
        {themeMode === 'light' ? (
          <FiMoon className="w-6 h-6" />
        ) : (
          <FiSun className="w-6 h-6" />
        )}
      </button>
    </div>
  </div>
</div>

<script>
  import { store } from '../../store';
  import { toggleTheme } from '../../features/themeSlice';

  // Define the theme toggle function in the client-side script
  window.handleThemeToggle = () => {
    store.dispatch(toggleTheme());
  };

  // Optional: Add listener for system theme changes
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    const newTheme = e.matches ? 'dark' : 'light';
    if (store.getState().theme.mode !== newTheme) {
      store.dispatch(toggleTheme());
    }
  });
</script>

<script>
  // TypeScript declaration for the global function
  declare global {
    interface Window {
      handleThemeToggle: () => void;
    }
  }
</script>