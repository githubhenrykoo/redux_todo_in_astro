---
import '../styles/globals.css';
import ResizablePanels from '../components/panels/ResizablePanels.astro';
import PanelGroupLayout from './PanelGroupLayout';
import RegularTopBar from '../components/panels/TopBar';
import KubernetesTopBar from '../components/panels/KubernetesTopBar';
import Sidebar from '../components/panels/Sidebar.astro';
import { store } from '../store';

interface Props {
	title: string;
}

// Check if we're running in Kubernetes (env var would be set in the container)
const isKubernetes = process.env.KUBERNETES_SERVICE_HOST || process.env.IS_KUBERNETES || false;

// Use the appropriate TopBar component
const TopBar = isKubernetes ? KubernetesTopBar : RegularTopBar;

const { title } = Astro.props;
const initialTheme = store.getState().theme?.mode || 'light';
---

<!doctype html>
<html lang="en" class:list={[initialTheme, 'min-h-screen overflow-hidden']}>
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<script define:vars={{initialTheme}}>
			// Ensure consistent theme on initial load
			document.documentElement.classList.remove('light', 'dark');
			document.documentElement.classList.add(initialTheme);
		</script>
	</head>
	<body class="min-h-screen max-h-screen h-screen flex flex-col bg-background text-foreground antialiased">
		<div class="flex-none h-14">
			<TopBar client:load initial-theme={initialTheme} />
		</div>
		<div class="flex-1 overflow-hidden">
			<div class="flex h-full">
				<div class="w-12 flex-none bg-muted border-r border-neutral-200 dark:border-neutral-800">
					<Sidebar />
				</div>
				<div class="flex-1 bg-background">
					<PanelGroupLayout client:load />
				</div>
			</div>
		</div>
	</body>
</html>

<script>
	import { store } from '../store';
	import { initServiceWorkerManager } from '../utils/serviceWorkerManager';

	// Initialize service worker manager to handle API endpoint redirection
	document.addEventListener('DOMContentLoaded', async () => {
		// Check and update service worker if needed
		const updated = await initServiceWorkerManager();
		if (updated) {
			console.log('Service worker updated. Old API endpoints will now redirect properly.');
		}
	});

	// Apply initial theme
	const initialTheme = store.getState().theme?.mode || 'light';
	document.documentElement.classList.remove('light', 'dark');
	document.documentElement.classList.add(initialTheme);

	// Subscribe to theme changes
	store.subscribe(() => {
		const theme = store.getState().theme?.mode;
		if (theme) {
			document.documentElement.classList.remove('light', 'dark');
			document.documentElement.classList.add(theme);
		}
	});
</script>

<style is:global>
	:root {
		--accent: 136, 58, 234;
		--accent-light: 224, 204, 250;
		--accent-dark: 49, 10, 101;
		--accent-gradient: linear-gradient(
			45deg,
			rgb(var(--accent)),
			rgb(var(--accent-light)) 30%,
			white 60%
		);
	}
	html {
		font-family: system-ui, sans-serif;
		background-color: hsl(var(--background));
		color: hsl(var(--foreground));
		overflow: hidden;
	}
	code {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			Liberation Mono,
			DejaVu Sans Mono,
			Bitstream Vera Sans Mono,
			Courier New,
			monospace;
	}
</style>