---
import '../styles/globals.css';
import JsonSidebar from '../components/JsonSidebar';
import ResizablePanel from '../components/ResizablePanel';
import { store } from '../store';

// Initialize all key state values
const initialState = store.getState();
const initialTheme = initialState.theme?.mode || 'light';
const initialLayout = initialState.resizeable?.currentLayout || 'default';
const contentState = initialState.content || {};
const todoState = initialState.todo || {};
const panelLayoutState = initialState.panellayout || {};
---

<html lang="en" class:list={[initialTheme, 'min-h-screen']}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Resizable Panel Layout</title>
    <style>
      html, body {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow: hidden;
      }
      .app-container {
        display: flex;
        height: 100vh;
        width: 100vw;
      }
      .sidebar-container {
        width: 250px;
        flex-shrink: 0;
      }
      .main-content {
        flex-grow: 1;
        overflow: hidden;
      }
      .app-footer {
        padding: 10px;
        text-align: center;
        color: #666;
      }
    </style>
    <script define:vars={{initialTheme}}>
      // Ensure consistent theme on initial load
      document.documentElement.classList.remove('light', 'dark');
      document.documentElement.classList.add(initialTheme);
    </script>
  </head>
  <body class="min-h-screen bg-background text-foreground antialiased">
    <div class="app-container">
      <div class="sidebar-container">
        <JsonSidebar client:load />
      </div>
      <div class="main-content" id="panel-container">
        <ResizablePanel 
          client:load
          useDefaultContent={true}
        />
        <slot />
      </div>
    </div>

    <!-- Use the is:inline type="module" syntax to properly define this as a module -->
    <script is:inline type="module">
      // Ensure Redux state is properly initialized
      import { store } from '/src/store.js';
      
      // Apply initial theme and set up theme subscription
      const initialTheme = store.getState().theme?.mode || 'light';
      document.documentElement.classList.remove('light', 'dark');
      document.documentElement.classList.add(initialTheme);
      
      // Subscribe to state changes using startTransition to prevent hydration errors
      let isHydrated = false;
      
      // Wait for hydration to complete
      setTimeout(() => {
        isHydrated = true;
        console.log('Hydration complete, safe to update state now');
      }, 100);
      
      store.subscribe(() => {
        // Only process state updates after hydration
        if (!isHydrated) return;
        
        const state = store.getState();
        
        // Handle theme changes
        const theme = state.theme?.mode;
        if (theme) {
          document.documentElement.classList.remove('light', 'dark');
          document.documentElement.classList.add(theme);
        }
        
        // Log state changes to help with debugging
        console.log('Redux state updated', {
          theme: state.theme?.mode,
          content: state.content?.selectedHash ? 'Has selected content' : 'No selected content',
          todo: Object.keys(state.todo || {}).length > 0 ? 'Has todos' : 'No todos',
          layout: state.resizeable?.currentLayout
        });
      });
    </script>
  </body>
</html>
