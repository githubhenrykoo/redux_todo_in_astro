---
if (Astro.request.method !== 'GET') {
  return new Response(JSON.stringify({ error: 'Method not allowed' }), {
    status: 405,
    headers: {
      'Content-Type': 'application/json'
    }
  });
}

const url = new URL(Astro.request.url);
const pageId = url.searchParams.get('pageId');
const accessToken = url.searchParams.get('accessToken');

if (!pageId || !accessToken) {
  return new Response(JSON.stringify({
    error: 'Missing pageId or accessToken'
  }), {
    status: 400,
    headers: {
      'Content-Type': 'application/json'
    }
  });
}

try {
  const response = await fetch(`https://api.notion.com/v1/pages/${pageId}`, {
    headers: {
      'Authorization': `Bearer ${accessToken}`,
      'Notion-Version': '2022-06-28'
    }
  });

  if (!response.ok) {
    const errorText = await response.text();
    console.error('Notion API error:', errorText);
    throw new Error(`Notion API error: ${response.statusText}`);
  }

  const pageData = await response.json();

  // Get block children for content
  const blocksResponse = await fetch(`https://api.notion.com/v1/blocks/${pageId}/children`, {
    headers: {
      'Authorization': `Bearer ${accessToken}`,
      'Notion-Version': '2022-06-28'
    }
  });

  const blocksData = await blocksResponse.json();

  // Process blocks into our format
  const tables = [];
  const descriptions = [];
  const subheadings = [];

  if (blocksData.results) {
    blocksData.results.forEach(block => {
      switch (block.type) {
        case 'paragraph':
          if (block.paragraph.rich_text.length > 0) {
            descriptions.push({
              id: block.id,
              content: block.paragraph.rich_text.map(text => text.plain_text).join('')
            });
          }
          break;
        case 'heading_1':
        case 'heading_2':
        case 'heading_3':
          if (block[block.type].rich_text.length > 0) {
            subheadings.push({
              id: block.id,
              level: parseInt(block.type.slice(-1)),
              content: block[block.type].rich_text.map(text => text.plain_text).join('')
            });
          }
          break;
      }
    });
  }

  return new Response(JSON.stringify({
    success: true,
    document: {
      page: pageData,
      tables,
      descriptions,
      subheadings
    }
  }), {
    status: 200,
    headers: {
      'Content-Type': 'application/json'
    }
  });
} catch (error) {
  console.error('Error:', error);
  return new Response(JSON.stringify({
    error: error.message
  }), {
    status: 500,
    headers: {
      'Content-Type': 'application/json'
    }
  });
}
---
