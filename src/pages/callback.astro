---
import Layout from '../layouts/BaseLayout.astro';
---

<Layout title="Authentication Callback">
  <div class="min-h-screen flex items-center justify-center">
    <div class="text-center">
      <h1 class="text-2xl font-semibold mb-4">Processing Authentication...</h1>
      <p class="text-gray-600">You will be redirected back automatically.</p>
    </div>
  </div>

  <script>
    // Function to handle the authentication callback
    async function handleAuthCallback() {
      try {
        // Extract the authorization code from the URL and trim any whitespace
        const urlParams = new URLSearchParams(window.location.search);
        const rawCode = urlParams.get('code');
        const rawState = urlParams.get('state');
        const code = rawCode ? rawCode.trim() : null;

        // Detailed logging of all URL parameters
        console.log('Authentication Callback Full URL Details:', {
          fullUrl: window.location.href,
          searchParams: Object.fromEntries(urlParams.entries())
        });

        if (!code) {
          console.error('No authorization code found');
          throw new Error('No authorization code present in the URL');
        }

        // Log detailed debug information
        console.log('Authentication Callback Debug:', {
          code: code ? 'Code Present' : 'No Code',
          rawCode,
          rawState,
          origin: window.location.origin,
          fullUrl: window.location.href,
          clientId: import.meta.env.PUBLIC_AUTHENTIK_CLIENT_ID ? 'Present' : 'Missing',
          baseUrl: import.meta.env.PUBLIC_AUTHENTIK_URL,
          redirectUri: import.meta.env.PUBLIC_AUTHENTIK_REDIRECT_URI,
          clientSecret: import.meta.env.PUBLIC_AUTHENTIK_CLIENT_SECRET ? 'Present' : 'Missing'
        });

        // Import the Authentik client dynamically
        const { createClient } = await import('../lib/authentik/client');

        // Create the Authentik client with the same configuration used in TopBar
        const client = createClient({
          clientId: import.meta.env.PUBLIC_AUTHENTIK_CLIENT_ID || '',
          clientSecret: import.meta.env.PUBLIC_AUTHENTIK_CLIENT_SECRET || '',
          redirectUri: import.meta.env.PUBLIC_AUTHENTIK_REDIRECT_URI || '',
          scopes: import.meta.env.PUBLIC_AUTHENTIK_SCOPES || 'openid profile email',
          baseUrl: import.meta.env.PUBLIC_AUTHENTIK_URL || '',
          storageKey: `${import.meta.env.PUBLIC_AUTHENTIK_STORAGE_KEY_PREFIX || 'authentik_'}top_banner_auth`,
        });

        // Handle the callback
        const userInfo = await client.handleCallback(code);
        
        console.log('Authentication Successful:', userInfo);
      } catch (error: unknown) {
        const errorDetails = error instanceof Error 
          ? {
              errorName: error.name,
              errorMessage: error.message,
              errorStack: error.stack
            }
          : {
              errorName: 'Unknown Error',
              errorMessage: String(error),
              errorStack: null
            };

        console.error('Authentication callback failed:', errorDetails);

        // Fallback redirect if something goes wrong
        window.location.href = '/';
      }
    }

    // Run the callback handler when the page loads
    handleAuthCallback();
  </script>
</Layout>
